#include "stdafx.h"
//#include "md5.h"

#include "openssl/md5.h"

namespace core
{
    namespace tools
    {
        uint8_t hextobin(const char* str, uint8_t * bytes, size_t blen)
        {
            uint8_t pos;
            uint8_t idx0;
            uint8_t idx1;

            // mapping of ASCII characters to hex values
            const uint8_t hashmap[] =
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //  !"#$%&'
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ()*+,-./
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, // 01234567
                0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 89:;<=>?
                0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, // @ABCDEFG
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // HIJKLMNO
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // PQRSTUVW
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // XYZ[\]^_
                0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, // `abcdefg
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // hijklmno
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pqrstuvw
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // xyz{|}~.
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  // ........
            };

            ::memset(bytes, 0, blen);

            for (pos = 0; ((pos < (blen*2)) && (pos < strlen(str))); pos += 2)
            {
                idx0 = (uint8_t)str[pos+0];
                idx1 = (uint8_t)str[pos+1];
                bytes[pos/2] = (uint8_t)(hashmap[idx0] << 4) | hashmap[idx1];
            };

            return(0);
        }


        std::string md5(const void* _data, int32_t _size)
        {
            std::stringstream ss_hash;

            MD5_CTX md5handler;
            unsigned char md5digest[MD5_DIGEST_LENGTH];

            MD5_Init(&md5handler);
            MD5_Update(&md5handler, _data, _size);
            MD5_Final(md5digest,&md5handler);

            char format_buffer[10];

            for (int32_t i = 0; i < MD5_DIGEST_LENGTH; i++)
            {
#ifdef _WIN32
                sprintf_s(format_buffer, 10, "%02x", md5digest[i]);
#else
                sprintf(format_buffer, "%02x", md5digest[i]);
#endif

                ss_hash << format_buffer;
            }

            return ss_hash.str();
        }
    }
}


